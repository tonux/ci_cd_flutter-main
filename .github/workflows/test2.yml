#The name of your workflow.
name:  Test, build and deploy
# Trigger the workflow on push or pull request
on: [push,pull_request]
#A workflow run is made up of one or more jobs. Jobs run in parallel by default.
jobs:

  # test:
  #   #The type of machine to run the job on. [windows,macos, ubuntu , self-hosted]
  #   runs-on: macos-latest
  #   #sequence of tasks called
  #   steps:
  #     # The branch or tag ref that triggered the workflow will be checked out.
  #     # https://github.com/actions/checkout
  #     - uses: actions/checkout@v1
  #     # Setup a flutter environment.
  #     # https://github.com/marketplace/actions/flutter-action
  #     - uses: subosito/flutter-action@v1
  #       with:
  #         flutter-version: '2.2.0'
  #         channel: 'dev'
  #     - run: flutter pub get
  #     # run static analys code
  #     - run: flutter  analyze
  #     # run  flutter widgets tests  and unit tests
  #     - run: flutter test --coverage
  #     # Upload coverage reports to Codecov
  #     # https://github.com/marketplace/actions/codecov
  #     - name: Upload coverage to Codecov
  #       uses: codecov/codecov-action@v1
  #       with:
  #         token: ${{ secrets.CODECOV_TOKEN }}
  #         file: coverage/lcov.info
  # drive_ios:
  #   #creates a build matrix for your jobs
  #   strategy:
  #     #set of different configurations of the virtual environment.
  #     matrix:
  #       device:
  #         - "iPhone 8 (14.4)"
  #         - "iPhone 11 Pro Max (14.4)"
  #     fail-fast: false
  #   runs-on: macos-latest
  #   #Identifies any jobs that must complete successfully before this job will run.
  #   needs: test
  #   steps:
  #     - name: List all simulators
  #       run: xcrun instruments -s
  #     # get UUID  simulator and boot a simulator on mac from  command line
  #     - name: Start Simulator
  #       run: |
  #         UDID=$(
  #           xcrun instruments -s |
  #           awk \
  #             -F ' *[][]' \
  #             -v 'device=${{ matrix.device }}' \
  #             '$1 == device { print $2 }'
  #         )
  #         echo $UDID
  #         xcrun simctl list
  #         xcrun simctl boot "${UDID:?No Simulator with this name found}"
  #     - uses: actions/checkout@v1
  #     - uses: subosito/flutter-action@v1
  #       with:
  #         flutter-version: '2.2.0'
  #         channel: 'dev'
  #     # Run flutter integrate tests
  #     - name: Run Flutter Driver tests
  #       run: flutter drive --target=test_driver/app.dart

  # drive_android:
  #   runs-on: macos-latest
  #   #creates a build matrix for your jobs
  #   strategy:
  #     #set of different configurations of the virtual environment.
  #     matrix:
  #       api-level: [21, 29]
  #       target: [default]
  #   needs: test
  #   steps:
  #     - uses: actions/checkout@v1
  #     - uses: subosito/flutter-action@v1
  #       with:
  #         flutter-version: '2.2.0'
  #         channel: 'dev'
  #     - name: Run Flutter Driver tests
  #       #GitHub Action for installing, configuring and running Android Emulators (work only Mac OS)
  #       #https://github.com/ReactiveCircus/android-emulator-runner
  #       uses: reactivecircus/android-emulator-runner@v1
  #       with:
  #         api-level: ${{ matrix.api-level }}
  #         target: ${{ matrix.target }}
  #         arch: x86_64
  #         profile: Nexus 6
  #         script: flutter drive --target=test_driver/app.dart

  # deploy_ios:
  #   name: Deploy beta build to TestFlight
  #   runs-on: macOS-latest
  #   # needs: drive_ios
  #   steps:
  #     - name: Checkout code from ref
  #       uses: actions/checkout@v2
  #       with:
  #         ref: ${{ github.ref }}
  #     - name: Run Flutter tasks
  #       uses: subosito/flutter-action@v1
  #       with:
  #         flutter-version: '2.2.0'
  #     - run: flutter pub get
  #     - run: flutter build ios --release --no-codesign
  #     # - run: brew update && brew install awscli jq swiftlint
  #     - run: cd ./ios && bundle install && gem install fastlane && gem install bundler
  #     # - run: bundle exec fastlane scan
  #     # - name: Setup SSH Keys and known_hosts for fastlane match
  #     #   run: |
  #     #     SSH_PATH="$HOME/.ssh"
  #     #     mkdir -p "$SSH_PATH"
  #     #     touch "$SSH_PATH/known_hosts"
  #     #     echo "$PRIVATE_KEY" > "$SSH_PATH/id_rsa"
  #     #     chmod 700 "$SSH_PATH"
  #     #     ssh-keyscan github.com >> ~/.ssh/known_hosts
  #     #     chmod 600 "$SSH_PATH/known_hosts"
  #     #     chmod 600 "$SSH_PATH/id_rsa"
  #     #     eval $(ssh-agent)
  #     #     ssh-add "$SSH_PATH/id_rsa"
  #     #   env:
  #     #     PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  #     - name: Deploy iOS Beta to TestFlight via Fastlane
  #       uses: maierj/fastlane-action@v1.4.0
  #       with:
  #         lane: closed_beta
  #         subdirectory: ios
  #     # - name: Deploy to TestFlight
  #       # uses: maierj/fastlane-action@v1.4.0
  #       # with:
  #       #   lane: beta
  #       #   subdirectory: ios
  #       # run: |
  #         # cd ./ios && bundle exec fastlane beta
  #       env:
  #         APP_STORE_CONNECT_TEAM_ID: '${{ secrets.APP_STORE_CONNECT_TEAM_ID }}'
  #         DEVELOPER_APP_ID: '${{ secrets.DEVELOPER_APP_ID }}'
  #         DEVELOPER_APP_IDENTIFIER: '${{ secrets.DEVELOPER_APP_IDENTIFIER }}'
  #         DEVELOPER_PORTAL_TEAM_ID: '${{ secrets.DEVELOPER_PORTAL_TEAM_ID }}'
  #         FASTLANE_APPLE_ID: '${{ secrets.FASTLANE_APPLE_ID }}'
  #         FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: '${{ secrets.FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD }}'
  #         MATCH_PASSWORD: '${{ secrets.MATCH_PASSWORD }}'
  #         GIT_AUTHORIZATION: '${{ secrets.GIT_AUTHORIZATION }}'
  #         PROVISIONING_PROFILE_SPECIFIER: '${{ secrets.PROVISIONING_PROFILE_SPECIFIER }}'
  #         TEMP_KEYCHAIN_PASSWORD: '${{ secrets.TEMP_KEYCHAIN_PASSWORD }}'
  #         TEMP_KEYCHAIN_USER: '${{ secrets.TEMP_KEYCHAIN_USER }}'

  deploy_ios:
    name: Deploy beta build to TestFlight
    runs-on: macOS-latest
    steps:
      - name: Checkout code from ref
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}
      - name: Run Flutter tasks
        uses: subosito/flutter-action@v1
        with:
          flutter-version: '2.2.0'
      - run: flutter pub get
      - run: flutter build ios --release --no-codesign
      - name: Deploy iOS Beta to TestFlight via Fastlane
        uses: maierj/fastlane-action@v1.4.0
        with:
          lane: beta
          subdirectory: ios
        env:
          APP_STORE_CONNECT_TEAM_ID: '${{ secrets.APP_STORE_CONNECT_TEAM_ID }}'
          DEVELOPER_APP_ID: '${{ secrets.DEVELOPER_APP_ID }}'
          DEVELOPER_APP_IDENTIFIER: '${{ secrets.DEVELOPER_APP_IDENTIFIER }}'
          DEVELOPER_PORTAL_TEAM_ID: '${{ secrets.DEVELOPER_PORTAL_TEAM_ID }}'
          FASTLANE_APPLE_ID: '${{ secrets.FASTLANE_APPLE_ID }}'
          FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: '${{ secrets.FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD }}'
          MATCH_PASSWORD: '${{ secrets.MATCH_PASSWORD }}'
          GIT_AUTHORIZATION: '${{ secrets.GIT_AUTHORIZATION }}'
          PROVISIONING_PROFILE_SPECIFIER: '${{ secrets.PROVISIONING_PROFILE_SPECIFIER }}'
          TEMP_KEYCHAIN_PASSWORD: '${{ secrets.TEMP_KEYCHAIN_PASSWORD }}'
          TEMP_KEYCHAIN_USER: '${{ secrets.TEMP_KEYCHAIN_USER }}'
          keychain_password: '${{ secrets.TEMP_KEYCHAIN_PASSWORD }}'
          FASTLANE_USER: '${{ secrets.FASTLANE_USER }}'
          FASTLANE_PASSWORD: '${{ secrets.FASTLANE_PASSWORD }}'
          SPACESHIP_ONLY_ALLOW_INTERACTIVE_2FA: '${{ secrets.SPACESHIP_ONLY_ALLOW_INTERACTIVE_2FA}}'
          FASTLANE_SESSION: '${{ secrets.FASTLANE_SESSION }}'



  # build_deploy:
  #   #if conditional to prevent a job from running
  #   if: github.event_name != 'pull_request'
  #   runs-on: macos-latest
  #   #Identifies any jobs that must complete successfully before this job will run.
  #   needs: [drive_ios,drive_android,test]
  #   name: Build  apk  and web
  #   steps:
  #     - uses: actions/checkout@v1
  #     - uses: subosito/flutter-action@v1
  #       with:
  #         flutter-version: '1.12.14'
  #         channel: 'dev'
  #     # This action sets up a java environment
  #     # https://github.com/actions/setup-java
  #     - uses: actions/setup-java@v1
  #       with:
  #         java-version: '12.x'
  #     #enable linux,macos,windows   and  web
  #     - run: flutter  config --enable-web
  #     - run: flutter  config --enable-linux-desktop
  #     - run: flutter  config --enable-macos-desktop
  #     - run: flutter  config --enable-windows-desktop
  #     - run: flutter pub get
  #     # build macOS desktop version
  #     - run: flutter build macos --release
  #     # build Android version
  #     - run: flutter build apk --debug --split-per-abi
  #     # This action will create a github release and optionally upload an artifact to it.
  #     # https://github.com/ncipollo/release-action
  #     - name: Create a Release APK
  #       uses: ncipollo/release-action@v1
  #       with:
  #         artifacts: "build/app/outputs/apk/debug/*.apk,build/macos/Build/Products/Release/*.app"
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #     # build Flutter web version
  #     - run: flutter build web
  #     # Handle the deploy process of your project to GitHub Pages.
  #     # https://github.com/JamesIves/github-pages-deploy-action
  #     - uses: JamesIves/github-pages-deploy-action@releases/v3
  #       with:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_ACCESS_TOKEN }}
  #         BASE_BRANCH: master
  #         BRANCH: gh-pages
  #         FOLDER: build/web
